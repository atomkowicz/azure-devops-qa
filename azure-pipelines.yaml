trigger:
- master

name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  displayName: Provisioning
  jobs:
  - job: Build
    displayName: Terraform Provisioning
    steps:
      - task: InstallSSHKey@0
        displayName: Install ssh keys
        inputs:
          knownHostsEntry: 'default'
          sshKeySecureFile: 'id_rsa'
      - task: TerraformInstaller@0
        displayName: 'Install terraform'
        inputs:
          terraformVersion: '0.12.3'
      - task: TerraformTaskV1@0
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          commandOptions: |
            -backend-config "access_key=$(STORAGE_ACCESS_KEY)"
          backendServiceArm: 'http://finprojserviceprincipal'
          backendAzureRmResourceGroupName: 'finprojstorage'
          backendAzureRmStorageAccountName: 'finproj30893'
          backendAzureRmContainerName: 'finprojcontainer'
          backendAzureRmKey: terraform.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
      - task: TerraformTaskV1@0
        displayName: Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          commandOptions: |
            -var "subscription_id=$(AZURE_SUBSCRIPTION_ID)" -var "client_id=$(CLIENT_ID)" -var "client_secret=$(CLIENT_SECRET)" -var "tenant_id=$(TENANT_ID)"
          environmentServiceNameAzureRM: 'http://finprojserviceprincipal'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
      - task: TerraformTaskV1@0
        displayName: Terraform Apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: |
            -var "subscription_id=$(AZURE_SUBSCRIPTION_ID)" -var "client_id=$(CLIENT_ID)" -var "client_secret=$(CLIENT_SECRET)" -var "tenant_id=$(TENANT_ID)"
          environmentServiceNameAzureRM: 'http://finprojserviceprincipal'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

# - stage: Build
#   jobs:
#   - job: Build
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     - task: CmdLine@2
#       displayName: Install Newman runner
#       inputs:
#         script: 'sudo npm install -g newman'
#         workingDirectory: $(System.DefaultWorkingDirectory)
#     - task: CmdLine@2
#       displayName: Run data validation tests
#       continueOnError: true
#       inputs:
#         script: |
#           newman run -e test.postman_environment.json data_validation_tests.json --reporters cli,junit --reporter-junit-export $(Build.SourcesDirectory)/automatedtesting/postman/newman_test_result.xml
#         workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#     - task: CmdLine@2
#       displayName: Run regression tests
#       continueOnError: true
#       inputs:
#         script: |
#           newman run -e test.postman_environment.json regression_tests.json --reporters cli,junit --reporter-junit-export $(Build.SourcesDirectory)/automatedtesting/postman/newman_test_result.xml
#         workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#     - task: PublishTestResults@2
#       displayName: Publish Test Results
#       inputs:
#         testResultsFormat: 'JUnit'
#         testResultsFiles: '**/newman_test_*.xml'
    
# - stage: Build
#   jobs:
#   - job: Build
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
    # - task: ArchiveFiles@2
    #   displayName: 'Archive FakeRestAPI'
    #   inputs:
    #     rootFolderOrFile: 'path/to/fakerestapi'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #   displayName: 'Upload Package'
    #   artifact: drop-fakerestapi
# - stage:
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'Ubuntu-16.04'
#     environment: 'TEST'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: ''
#               appName: ''
#               appType: webApp
#               package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path